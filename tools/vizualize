#!/usr/bin/env python3

import argparse
import json

import re

# import pprint
# import tempfile
# import pathlib
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import networkx as nx

# import graphviz

seed = 0


def main():
    parser = argparse.ArgumentParser(
        description="Vizualization utility for paptrace."
    )
    parser.add_argument(
        "trace_file", help="Path to paptrace generated JSON file."
    )
    args = parser.parse_args()

    traces = load_traces(args.trace_file)
    graphs = [trace_to_graph(trace) for trace in traces]
    titles = [to_trace_title(trace) for trace in traces]
    for idx, graph in enumerate(graphs):
        pos = nx.nx_agraph.graphviz_layout(graph)
        nx.draw_networkx_nodes(graph, pos, alpha=0.5)
        nx.draw_networkx_edges(graph, pos)
        label_options = {"ec": "k", "fc": "white", "alpha": 0.7}
        nx.draw_networkx_labels(graph, pos, font_size=6, bbox=label_options)
        plt.axis("off")
        plt.title(titles[idx])
        plt.gcf().set_size_inches(8, 8)
        plt.show()


def load_traces(trace_file):
    with open(trace_file, "r") as f:
        data = json.load(f)
    return data["traces"]


def trace_to_graph(trace):
    graph = nx.DiGraph(name=to_trace_label(trace))
    populate_graph_from_trace(graph, trace)
    return graph


def to_trace_title(trace):
    return f"{trace['sig']}({to_params_str(trace['params'])})"


def to_params_str(params):
    return ", ".join([f"{x['name']}={x['value']}" for x in params])


fn_ids = {}


def to_trace_label(trace):
    global fn_ids
    if "sig" in trace:
        id_ = fn_ids.setdefault(trace["sig"], f"fn{len(fn_ids)}")
        return f"{id_}({to_params_str(trace['params'])})"
    return trace["desc"]


def populate_graph_from_trace(graph, trace):
    id_ = to_trace_label(trace)
    graph.add_node(id_)
    if "children" in trace:
        prev_child = id_
        for child in trace["children"]:
            populate_graph_from_trace(graph, child)
            child_id = to_trace_label(child)
            graph.add_edge(prev_child, child_id)
            prev_child = child_id


if __name__ == "__main__":
    main()
